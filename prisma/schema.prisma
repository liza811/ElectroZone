// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}
model User {
  id           String @id @default(uuid())
  email        String @unique
  firstName    String
  lastName     String
  profileImage String?
role      Role     @default(USER)
  orders Order[]

  createdAt DateTime @default(now())
    cart  Cart?


  Like Like[]
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  status      ProductStatus
  price       Float
  NewPrice      Float?
  quantity    Int           @default(1)
  images      String[]

  isFeatured Boolean @default(false)

  createdAt  DateTime  @default(now())
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
   


  OrderItem OrderItem[]

  CartItem CartItem[]


  Like Like[]
}
model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) 
   @@index([userId, productId])
}
model Banner {
  id          String @id @default(uuid())
  title       String
  imageString String

  createdAt DateTime @default(now())
}

model Order {
  id     String @id @default(uuid())
  status String @default("pending")
  amount Int

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
 guestEmail String?  
  guestName  String?  
  guestPhone String?
   billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?

  billingPostalCode    String?
  billingCountry       String?
  createdAt DateTime @default(now())
    orderItems  OrderItem[]
}


model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String   
  productId String      
  quantity  Int     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
enum ProductStatus {
  draft
  published
  archived
}

model Category {
  id          String    @id @default(uuid())
  imageString String
  name        String
  products    Product[]
}


model Cart {
  id          Int      @id @default(autoincrement())
  userId      String?     @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       CartItem[]  
  user        User?    @relation(fields: [userId], references: [id])
}

model CartItem {
  id          Int      @id @default(autoincrement())
  cartId      Int   
  productId   String      
  quantity    Int     
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade) 
  product     Product  @relation(fields: [productId], references: [id])
}
